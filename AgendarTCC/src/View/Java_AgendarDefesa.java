/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
/**
 *
 * @author Vinicius
 */
public class Java_AgendarDefesa extends javax.swing.JFrame {
    private MainFrame mainFrame; // aqui recebe o mainFrame
    public Java_AgendarDefesa(MainFrame mainFrame) {
        this.mainFrame = mainFrame;
        initComponents();
    }
    private void carregarDadosTabela() {
        try (Connection conexao = ConexaoBD.obterConexao()) {
        String sql = "SELECT codigo_agendamento, CPF_banca2, CPF_banca1, CPF_banca3, CPF_banca4, Professor_CPF, Sala_Defesa_codigo_sala, Alunos_matricula FROM agenda_defesa";
        try (PreparedStatement preparedStatement = conexao.prepareStatement(sql)) {
            ResultSet resultSet = preparedStatement.executeQuery();

            // Limpa a tabela antes de adicionar novos dados
            DefaultTableModel model = (DefaultTableModel) jTableAgendar_Defesa.getModel();
            model.setRowCount(0);

            // Adiciona os dados na tabela
            while (resultSet.next()) {
                Object[] row = {
                    resultSet.getString("codigo_agendamento"),
                    resultSet.getString("Sala_Defesa_codigo_sala"),
                    resultSet.getString("Professor_CPF"),
                    resultSet.getString("Alunos_matricula"),
                    resultSet.getString("CPF_banca1"),
                    resultSet.getString("CPF_banca2"),
                    resultSet.getString("CPF_banca3"),
                    resultSet.getString("CPF_banca4"),
                };
                model.addRow(row);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        Mensagens.exibirMensagemErro(this, "erro");
    }
     }
    
    
    
    
    
    
    
    private DefaultTableModel model; // 
    
    
    
    public Java_AgendarDefesa() {
        initComponents();
        carregarDadosTabela(); // Adicione esta linha para carregar os dados inicialmente
        
        // iniciar modelo tabela 
        model = new DefaultTableModel();
        jTableAgendar_Defesa.setModel(model);
        model.addColumn("Código Agendamento");
        model.addColumn("Código Sala Defesa");
        model.addColumn("CPF Orientador");
        model.addColumn("Matrícula Aluno");
        model.addColumn("CPF Banca 1");
        model.addColumn("CPF Banca 2");
        model.addColumn("CPF Banca 3");
        model.addColumn("CPF Banca 4");
        
        // Tornar campos apenas para leitura
        jtxtCodAgendamento.setEditable(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jtxtCod_Sala_Defesa = new javax.swing.JTextField();
        jtxtMatricula = new javax.swing.JTextField();
        jtxtOrientador = new javax.swing.JTextField();
        jiconProfessor = new javax.swing.JLabel();
        jiconSalaDefesa = new javax.swing.JLabel();
        jiconAlunos = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jbtnCadastrar = new javax.swing.JButton();
        jbntAtt = new javax.swing.JButton();
        jbntListar = new javax.swing.JButton();
        jbntReset = new javax.swing.JButton();
        jbntDeletar = new javax.swing.JButton();
        jbntSair = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jtxtCPF2 = new javax.swing.JTextField();
        jtxtCPF1 = new javax.swing.JTextField();
        jtxtCPF4 = new javax.swing.JTextField();
        jtxtCodAgendamento = new javax.swing.JTextField();
        jtxtCPF3 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAgendar_Defesa = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Agendar Defesa");
        setSize(new java.awt.Dimension(0, 0));

        jPanel1.setBackground(new java.awt.Color(32, 91, 139));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Agendar Defesa");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, -1, -1));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/univicosa_horizontal 3.png"))); // NOI18N
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(525, 14, -1, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, java.awt.Color.darkGray));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Codigo Sala de Defesa");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("CPF Professor Orientador");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("Matricula Aluno");

        jtxtCod_Sala_Defesa.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jtxtMatricula.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jtxtOrientador.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jiconProfessor.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jiconProfessor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/table_go.png"))); // NOI18N
        jiconProfessor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jiconProfessorMouseClicked(evt);
            }
        });

        jiconSalaDefesa.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jiconSalaDefesa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/table_go.png"))); // NOI18N
        jiconSalaDefesa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jiconSalaDefesaMouseClicked(evt);
            }
        });

        jiconAlunos.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jiconAlunos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/table_go.png"))); // NOI18N
        jiconAlunos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jiconAlunosMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jtxtMatricula))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jtxtOrientador))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addComponent(jtxtCod_Sala_Defesa, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jiconAlunos, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jiconSalaDefesa, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jiconProfessor, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtxtCod_Sala_Defesa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jiconSalaDefesa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtxtOrientador)
                            .addComponent(jiconProfessor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(33, 33, 33)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addGap(23, 23, 23)
                            .addComponent(jtxtMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jiconAlunos, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(338, 338, 338))
        );

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jbtnCadastrar.setBackground(new java.awt.Color(32, 91, 139));
        jbtnCadastrar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jbtnCadastrar.setForeground(new java.awt.Color(255, 255, 255));
        jbtnCadastrar.setText("Cadastrar");
        jbtnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCadastrarActionPerformed(evt);
            }
        });

        jbntAtt.setBackground(new java.awt.Color(32, 91, 139));
        jbntAtt.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jbntAtt.setForeground(new java.awt.Color(255, 255, 255));
        jbntAtt.setText("Atualizar");
        jbntAtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbntAttActionPerformed(evt);
            }
        });

        jbntListar.setBackground(new java.awt.Color(32, 91, 139));
        jbntListar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jbntListar.setForeground(new java.awt.Color(255, 255, 255));
        jbntListar.setText("Listar");
        jbntListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbntListarActionPerformed(evt);
            }
        });

        jbntReset.setBackground(new java.awt.Color(32, 91, 139));
        jbntReset.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jbntReset.setForeground(new java.awt.Color(255, 255, 255));
        jbntReset.setText("Resetar");
        jbntReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbntResetActionPerformed(evt);
            }
        });

        jbntDeletar.setBackground(new java.awt.Color(32, 91, 139));
        jbntDeletar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jbntDeletar.setForeground(new java.awt.Color(255, 255, 255));
        jbntDeletar.setText("Deletar");
        jbntDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbntDeletarActionPerformed(evt);
            }
        });

        jbntSair.setBackground(new java.awt.Color(32, 91, 139));
        jbntSair.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jbntSair.setForeground(new java.awt.Color(255, 255, 255));
        jbntSair.setText("Sair");
        jbntSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbntSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbntSair, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbntDeletar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbntReset, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbntListar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbntAtt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbtnCadastrar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbtnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbntAtt, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbntListar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbntReset, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbntDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbntSair, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Banca da defesa");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel6.setText("CPF ");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel9.setText("CPF ");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel7.setText("CPF ");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setText("Código Do Agendamento");

        jtxtCPF2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jtxtCPF2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtCPF2ActionPerformed(evt);
            }
        });

        jtxtCPF1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jtxtCPF4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jtxtCodAgendamento.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jtxtCodAgendamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtCodAgendamentoActionPerformed(evt);
            }
        });

        jtxtCPF3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jtxtCPF3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtCPF3ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel10.setText("CPF ");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jtxtCodAgendamento, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addGap(18, 18, 18)
                                    .addComponent(jtxtCPF2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(jtxtCPF1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(146, 146, 146)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel4Layout.createSequentialGroup()
                                            .addComponent(jLabel9)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jtxtCPF4, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel4Layout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addGap(41, 41, 41)
                                            .addComponent(jtxtCPF3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(152, 152, 152)))
                            .addGap(39, 39, 39)))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jtxtCPF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtxtCPF3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jtxtCPF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jtxtCPF4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtxtCodAgendamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTableAgendar_Defesa.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTableAgendar_Defesa.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jTableAgendar_Defesa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código Agendamento", "Código Sala Defesa", "CPF Orientador", "Matrícula Aluno", "CPF Banca 1", "CPF Banca 2", "CPF Banca 3", "CPF Banca 4"
            }
        ));
        jTableAgendar_Defesa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAgendar_DefesaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableAgendar_Defesa);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 596, Short.MAX_VALUE))
                                .addGap(63, 63, 63)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 336, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtxtCPF2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtCPF2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtCPF2ActionPerformed

    private void jtxtCodAgendamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtCodAgendamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtCodAgendamentoActionPerformed

    private void jbtnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCadastrarActionPerformed
        String SalaDefesa = jtxtCod_Sala_Defesa.getText();
        String Orientador = jtxtOrientador.getText();
        String matricula = jtxtMatricula.getText();
        String CPF4 = jtxtCPF4.getText();
        String CPF3 = jtxtCPF3.getText();
        String CPF2 = jtxtCPF2.getText();
        String CPF1 = jtxtCPF1.getText();
        
        
         // Verifique se os campos obrigatórios estão preenchidos
    if (SalaDefesa.isEmpty() || Orientador.isEmpty() || matricula.isEmpty() || CPF1.isEmpty()) {
        Mensagens.exibirMensagemErro(this, "Preencha todos os campos obrigatórios");
        return;  // Não continue com a atualização se algum campo estiver vazio
    }

    // Converta a String para um tipo numérico (por exemplo, Integer)
    try {
        int codigoSala = Integer.parseInt(SalaDefesa);
        
        // Verificar a existência do agendamento da sala na tabela sala_defesa
        if (!verificarExistenciaCodigoSala(SalaDefesa, "sala_defesa", "codigo_sala")) {
            Mensagens.exibirMensagemErro(this, "A sala de defesa ainda não está cadastrada!.");
            return;
        }

        // Verificar a existência da matrícula na tabela de alunos
        if (!verificarExistenciaMatricula(matricula, "alunos", "matricula")) {
            Mensagens.exibirMensagemErro(this, "A matrícula do aluno não é cadastrada.");
            return;
        }

        // Verificar a existência do CPF na tabela de professores
        if (!verificarExistenciaCPF(Orientador, "professor", "cpf")) {
            Mensagens.exibirMensagemErro(this, "O CPF do professor não é cadastrado.");
            return;
        }

        // Continuar com a inserção na tabela agenda_defesa
        try (Connection conexao = ConexaoBD.obterConexao()) {
            String sql = "INSERT INTO agenda_defesa (CPF_banca2, CPF_banca1, CPF_banca3, CPF_banca4, Professor_CPF, Sala_Defesa_codigo_sala, Alunos_matricula) VALUES (?, ?, ?, ?, ?, ?, ?)";
            try (PreparedStatement preparedStatement = conexao.prepareStatement(sql)) {
                preparedStatement.setString(1, CPF2);
                preparedStatement.setString(2, CPF1);
                preparedStatement.setString(3, CPF3);
                preparedStatement.setString(4, CPF4);
                preparedStatement.setString(5, Orientador);
                preparedStatement.setInt(6, codigoSala);
                preparedStatement.setString(7, matricula);

                int linhasAfetadas = preparedStatement.executeUpdate();

                if (linhasAfetadas > 0) {
                    Mensagens.exibirMensagemSucesso(this, "Dados Inseridos com sucesso");
                } else {
                    Mensagens.exibirMensagemErro(this, "Erro ao inserir dados");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            Mensagens.exibirMensagemErro(this, "ERROR");
        }
    } catch (NumberFormatException e) {
        // Trate o caso em que o texto não é um número válido
        e.printStackTrace(); // Ou faça algo mais apropriado, como exibir uma mensagem de erro
    }
}

    
/* ---------------- Parte do código onde confere as chaves estrangeiras -----------
 ------------- TAMBÉM PERMITE A REUTILIZAÇÃO DO CONCEITO COMO NO UPDATE ------ */  
private boolean verificarExistenciaMatricula(String matricula, String tabela, String coluna) {
    try (Connection conexao = ConexaoBD.obterConexao()) {
        String sql = "SELECT COUNT(*) FROM " + tabela + " WHERE " + coluna + " = ?";
        try (PreparedStatement preparedStatement = conexao.prepareStatement(sql)) {
            preparedStatement.setString(1, matricula);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                resultSet.next();
                int count = resultSet.getInt(1);
                return count > 0;
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        return false;
    }
}
private boolean verificarExistenciaCodigoSala(String codigo_sala, String tabela, String coluna) {
    try (Connection conexao = ConexaoBD.obterConexao()) {
        String sql = "SELECT COUNT(*) FROM " + tabela + " WHERE " + coluna + " = ?";
        try (PreparedStatement preparedStatement = conexao.prepareStatement(sql)) {
            preparedStatement.setString(1, codigo_sala);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                resultSet.next();
                int count = resultSet.getInt(1);
                return count > 0;
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        return false;
    }
}

private boolean verificarExistenciaCPF(String cpf, String tabela, String coluna) {
    try (Connection conexao = ConexaoBD.obterConexao()) {
        String sql = "SELECT COUNT(*) FROM " + tabela + " WHERE " + coluna + " = ?";
        try (PreparedStatement preparedStatement = conexao.prepareStatement(sql)) {
            preparedStatement.setString(1, cpf);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                resultSet.next();
                int count = resultSet.getInt(1);
                return count > 0;
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        return false;
    } //------------------------------ AQUI TERMINA A VERIFICAÇÃO --------------
    }//GEN-LAST:event_jbtnCadastrarActionPerformed

    private void jbntAttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbntAttActionPerformed
        // TODO add your handling code here:
        String CodAgendamento = jtxtCodAgendamento.getText();
        String SalaDefesa = jtxtCod_Sala_Defesa.getText();
        String Orientador = jtxtOrientador.getText();
        String matricula = jtxtMatricula.getText();
        String CPF4 = jtxtCPF4.getText();
        String CPF3 = jtxtCPF3.getText();
        String CPF2 = jtxtCPF2.getText();
        String CPF1 = jtxtCPF1.getText();
        
    // Verifique se os campos obrigatórios estão preenchidos
    try {
    if (SalaDefesa.isEmpty() || Orientador.isEmpty() || matricula.isEmpty() || CPF1.isEmpty()) {
        Mensagens.exibirMensagemErro(this, "Preencha todos os campos obrigatórios");
        return;
    }

    // Convert String to Numeric
    int codigoSala = Integer.parseInt(SalaDefesa);

    // Check existence of data
    if (!verificarExistenciaCodigoSala(SalaDefesa, "sala_defesa", "codigo_sala")) {
        Mensagens.exibirMensagemErro(this, "A sala de defesa ainda não está cadastrada.");
        return;
    }

    if (!verificarExistenciaMatricula(matricula, "alunos", "matricula")) {
        Mensagens.exibirMensagemErro(this, "A matrícula do aluno não é cadastrada.");
        return;
    }

    if (!verificarExistenciaCPF(Orientador, "professor", "cpf")) {
        Mensagens.exibirMensagemErro(this, "O CPF do professor não é cadastrado.");
        return;
    }

    // Fazer o UPDATE no banco
    try (Connection conexao = ConexaoBD.obterConexao()) {
        String sql = "UPDATE agenda_defesa SET CPF_banca2=?, CPF_banca1=?, CPF_banca3=?, CPF_banca4=?, Professor_CPF=?, Sala_Defesa_codigo_sala=?, Alunos_matricula=? WHERE codigo_agendamento=?";
        try (PreparedStatement preparedStatement = conexao.prepareStatement(sql)) {
            preparedStatement.setString(1, CPF2);
            preparedStatement.setString(2, CPF1);
            preparedStatement.setString(3, CPF3);
            preparedStatement.setString(4, CPF4);
            preparedStatement.setString(5, Orientador);
            preparedStatement.setInt(6, codigoSala);
            preparedStatement.setString(7, matricula);
            preparedStatement.setString(8, CodAgendamento);

            int linhasAfetadas = preparedStatement.executeUpdate();

            if (linhasAfetadas > 0) {
                Mensagens.exibirMensagemSucesso(this, "Dados atualizados com sucesso");
            } else {
                Mensagens.exibirMensagemErro(this, "Nenhuma linha afetada. Registro não encontrado.");
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        Mensagens.exibirMensagemErro(this, "Erro ao atualizar dados: " + e.getMessage());
    }
} catch (NumberFormatException e) {
    // Handle the case where the text is not a valid number
    e.printStackTrace(); // Or do something more appropriate, like displaying an error message
}
    }//GEN-LAST:event_jbntAttActionPerformed

    private void jbntListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbntListarActionPerformed
        // Listar minha table:
        carregarDadosTabela();
    }//GEN-LAST:event_jbntListarActionPerformed

    private void jbntResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbntResetActionPerformed
        // ------------------Resetar---------------------------
        // Resetar o texto:
        jtxtCodAgendamento.setText("");
        jtxtOrientador.setText("");
        jtxtMatricula.setText("");
        jtxtCod_Sala_Defesa.setText("");
        jtxtCPF1.setText("");
        jtxtCPF2.setText("");
        jtxtCPF3.setText("");
        jtxtCPF4.setText("");
    }//GEN-LAST:event_jbntResetActionPerformed

    private void jbntDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbntDeletarActionPerformed
        /* ------------- Deletar Dados-------------
        A ação funciona direitinho no entanto, o text field do codigo agendamento está com false para não ser escrito
        pelo usuario, logo não é possível colocar o código ali logo não apaga
        mas isso não funciona quando abre o executável pela mainframe. pois abrindo direto é possível escolher na lista e apagar sem erro*/
       String cod_agendamento = jtxtCodAgendamento.getText();

try (Connection conexao = ConexaoBD.obterConexao()) {
    
    String sql = "DELETE FROM agenda_defesa WHERE codigo_agendamento = ?";
    try (PreparedStatement preparedStatement = conexao.prepareStatement(sql)) {
        // converter string para int
        int codAgendamento = Integer.parseInt(cod_agendamento);
        preparedStatement.setInt(1, codAgendamento);

        int linhasAfetadas = preparedStatement.executeUpdate();

        if (linhasAfetadas > 0) {
            Mensagens.exibirMensagemSucesso(this, "Deletado com sucesso!");
        } else {
            Mensagens.exibirMensagemErro(this, "Erro ao deletar");
        }
    }
} catch (SQLException e) {
    e.printStackTrace();
    Mensagens.exibirMensagemErro(this, "Erro ao deletar");
} catch (NumberFormatException e) {
    // Handle the case where the text is not a valid number
    e.printStackTrace(); // Or do something more appropriate, like displaying an error message
}
    }//GEN-LAST:event_jbntDeletarActionPerformed

    private void jbntSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbntSairActionPerformed
        // -----------SAIR --------------
        this.dispose();
        mainFrame.setVisible(true);
    }//GEN-LAST:event_jbntSairActionPerformed

    private void jtxtCPF3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtCPF3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtCPF3ActionPerformed

    private void jTableAgendar_DefesaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAgendar_DefesaMouseClicked
        // TODO add your handling code here:
        int selectedRow = jTableAgendar_Defesa.getSelectedRow();
        if (selectedRow >= 0) {
            System.out.println("Selected Row: " + selectedRow);
            System.out.println("Model Row Count: " + model.getRowCount());

        // Imprime os valores das colunas para depuração
            for (int i = 0; i < model.getColumnCount(); i++) {
                System.out.println("Column " + i + ": " + model.getValueAt(selectedRow, i));
            }

            jtxtCodAgendamento.setText(model.getValueAt(selectedRow, 0).toString());
            jtxtCod_Sala_Defesa.setText(model.getValueAt(selectedRow, 1).toString());
            jtxtOrientador.setText(model.getValueAt(selectedRow, 2).toString());
            jtxtMatricula.setText(model.getValueAt(selectedRow, 3).toString());
            jtxtCPF1.setText(model.getValueAt(selectedRow, 4).toString());
            jtxtCPF2.setText(model.getValueAt(selectedRow, 5).toString());
            jtxtCPF3.setText(model.getValueAt(selectedRow, 6).toString());
            jtxtCPF4.setText(model.getValueAt(selectedRow, 7).toString());

            
    }
        
    }//GEN-LAST:event_jTableAgendar_DefesaMouseClicked

    private void jiconSalaDefesaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jiconSalaDefesaMouseClicked
    Connection conexao = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {
        // Obtendo a conexão com o banco de dados
        conexao = ConexaoBD.obterConexao();

        // Definindo a consulta SQL
        String sql = "SELECT * FROM sala_defesa";

        // Criando o objeto PreparedStatement
        stmt = conexao.prepareStatement(sql);

        // Executando a consulta
        rs = stmt.executeQuery();

        // Criando uma tabela e um modelo de tabela
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Codigo da Sala");
        model.addColumn("Nome da Sala");
        model.addColumn("Local");
        model.addColumn("Hora");
        model.addColumn("Data");

        // Adicionando os resultados ao modelo da tabela
        while (rs.next()) {
        String codigo_sala = rs.getString("codigo_sala");
        String nome_sala = rs.getString("nome_sala");
        String local = rs.getString("local");
        String hora = rs.getString("hora");
        
        // Formatando a data para o formato "DD/MM/AAAA"
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String data = dateFormat.format(rs.getDate("data"));

        model.addRow(new Object[]{codigo_sala, nome_sala, local, hora, data});
    }



        // Criando uma tabela com o modelo
        JTable minhaTabela = new JTable(model);

        // Criando um JScrollPane e adicionando a tabela a ele
        JScrollPane minhaScrollPane = new JScrollPane(minhaTabela);

        // Criando uma nova janela para exibir a tabela
        JFrame novaJanela = new JFrame("Resultados da Consulta");
        novaJanela.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        novaJanela.setSize(500, 300);
        novaJanela.setLocationRelativeTo(null);
        novaJanela.add(minhaScrollPane); // Adicionando o JScrollPane à nova janela
        novaJanela.setVisible(true);

    } catch (SQLException e) {
        // Tratamento de exceções
        JOptionPane.showMessageDialog(null, "Erro ao executar a consulta: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);

    } finally {
        // Fechando os recursos
        ConexaoBD.fecharConexao(conexao);
        try {
            if (stmt != null) {
                stmt.close();
            }
            if (rs != null) {
                rs.close();
            }
        } catch (SQLException e) {
            System.err.println("Erro ao fechar os recursos: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_jiconSalaDefesaMouseClicked

    private void jiconProfessorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jiconProfessorMouseClicked
        // TODO add your handling code here:
         Connection conexao = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {
        // Obtendo a conexão com o banco de dados
        conexao = ConexaoBD.obterConexao();

        // Definindo a consulta SQL
        String sql = "SELECT * FROM professor";

        // Criando o objeto PreparedStatement
        stmt = conexao.prepareStatement(sql);

        // Executando a consulta
        rs = stmt.executeQuery();

        // Criando uma tabela e um modelo de tabela
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("CPF");
        model.addColumn("Nome");
        model.addColumn("Instituição");

        // Adicionando os resultados ao modelo da tabela
        while (rs.next()) {
            String CPF = rs.getString("CPF");
            String nome = rs.getString("nome");
            String instituicao = rs.getString("instituicao");
            model.addRow(new Object[]{CPF, nome, instituicao});
        }

        // Criando uma tabela com o modelo
        JTable minhaTabela = new JTable(model);

        // Criando um JScrollPane e adicionando a tabela a ele
        JScrollPane minhaScrollPane = new JScrollPane(minhaTabela);

        // Criando uma nova janela para exibir a tabela
        JFrame novaJanela = new JFrame("Resultados da Consulta");
        novaJanela.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        novaJanela.setSize(500, 300);
        novaJanela.setLocationRelativeTo(null);
        novaJanela.add(minhaScrollPane); // Adicionando o JScrollPane à nova janela
        novaJanela.setVisible(true);

    } catch (SQLException e) {
        // Tratamento de exceções
        JOptionPane.showMessageDialog(null, "Erro ao executar a consulta: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);

    } finally {
        // Fechando os recursos
        ConexaoBD.fecharConexao(conexao);
        try {
            if (stmt != null) {
                stmt.close();
            }
            if (rs != null) {
                rs.close();
            }
        } catch (SQLException e) {
            System.err.println("Erro ao fechar os recursos: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_jiconProfessorMouseClicked

    private void jiconAlunosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jiconAlunosMouseClicked
        // TODO add your handling code here:
        // TODO add your handling code here:
         Connection conexao = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {
        // Obtendo a conexão com o banco de dados
        conexao = ConexaoBD.obterConexao();

        // Definindo a consulta SQL
        String sql = "SELECT * FROM alunos";

        // Criando o objeto PreparedStatement
        stmt = conexao.prepareStatement(sql);

        // Executando a consulta
        rs = stmt.executeQuery();

        // Criando uma tabela e um modelo de tabela
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Nome");
        model.addColumn("Matrícula");

        // Adicionando os resultados ao modelo da tabela
        while (rs.next()) {
            String nome = rs.getString("nome");
            String matricula = rs.getString("matricula");
            model.addRow(new Object[]{ nome, matricula});
        }

        // Criando uma tabela com o modelo
        JTable minhaTabela = new JTable(model);

        // Criando um JScrollPane e adicionando a tabela a ele
        JScrollPane minhaScrollPane = new JScrollPane(minhaTabela);

        // Criando uma nova janela para exibir a tabela
        JFrame novaJanela = new JFrame("Resultados da Consulta");
        novaJanela.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        novaJanela.setSize(500, 300);
        novaJanela.setLocationRelativeTo(null);
        novaJanela.add(minhaScrollPane); // Adicionando o JScrollPane à nova janela
        novaJanela.setVisible(true);

    } catch (SQLException e) {
        // Tratamento de exceções
        JOptionPane.showMessageDialog(null, "Erro ao executar a consulta: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);

    } finally {
        // Fechando os recursos
        ConexaoBD.fecharConexao(conexao);
        try {
            if (stmt != null) {
                stmt.close();
            }
            if (rs != null) {
                rs.close();
            }
        } catch (SQLException e) {
            System.err.println("Erro ao fechar os recursos: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_jiconAlunosMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Java_AgendarDefesa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Java_AgendarDefesa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Java_AgendarDefesa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Java_AgendarDefesa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Java_AgendarDefesa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableAgendar_Defesa;
    private javax.swing.JButton jbntAtt;
    private javax.swing.JButton jbntDeletar;
    private javax.swing.JButton jbntListar;
    private javax.swing.JButton jbntReset;
    private javax.swing.JButton jbntSair;
    private javax.swing.JButton jbtnCadastrar;
    private javax.swing.JLabel jiconAlunos;
    private javax.swing.JLabel jiconProfessor;
    private javax.swing.JLabel jiconSalaDefesa;
    private javax.swing.JTextField jtxtCPF1;
    private javax.swing.JTextField jtxtCPF2;
    private javax.swing.JTextField jtxtCPF3;
    private javax.swing.JTextField jtxtCPF4;
    private javax.swing.JTextField jtxtCodAgendamento;
    private javax.swing.JTextField jtxtCod_Sala_Defesa;
    private javax.swing.JTextField jtxtMatricula;
    private javax.swing.JTextField jtxtOrientador;
    // End of variables declaration//GEN-END:variables
}
